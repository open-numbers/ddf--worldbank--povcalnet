#! /usr/bin/env python
# encoding: utf-8

import os
from waflib import Context
from waflib.Build import BuildContext

top = '.'
out = './build'
prefix = '../'

MAX_POVCALNET_BRACKET = 461

# TODO: add configure methods for install the venv and and requirements
# def hello(ctx):
#     """just a test"""
#     out, err = ctx.cmd_and_log(["python", "-V"], output=Context.BOTH, quiet=Context.BOTH)
#     print(out)


def configure(ctx):
    # TODO: add installation path (destdir)
    if ctx.options.prefix == '/usr/local':  # if user didn't provide the prefix, /usr/local is the default.
        # But we want the prefix variable to be the default.
        ctx.env.PREFIX = os.path.abspath(prefix)
    ctx.find_program("python", var="PYTHON")
    # ctx.find_program("ddf", var="DDF")


# update povcalnet source
def update_source(ctx):
    """download source from povcalnet"""
    # limit the jobs, don't DDoS upstream
    if ctx.jobs > 2:
        print('not using jobs > 2, setting jobs = 2')
        ctx.jobs = 2

    for i in range(MAX_POVCALNET_BRACKET):
        ctx(
            rule="${PYTHON} ${SRC[0]} " + str(i),
            source=["scripts/update_source.py", "scripts/lib.py"],
            target="source/povcalnet/" + "{:04d}.csv".format(i))


class UpdateSource(BuildContext):
    cmd = "update_source"
    fun = "update_source"


# move predownloaded source into build folder.
def update_source_predownloaded(ctx):
    """download source from povcalnet"""
    # limit the jobs, don't DDoS upstream
    if ctx.jobs > 2:
        print('not using jobs > 2, setting jobs = 2')
        ctx.jobs = 2

    for i in range(MAX_POVCALNET_BRACKET):
        ctx(
            rule="cp ${SRC} ${TGT}",
            source="source/povcalnet_predownloaded/" + "{:04d}.csv".format(i),
            target="source/povcalnet/" + "{:04d}.csv".format(i))


class UpdateSourcePre(BuildContext):
    cmd = "update_source_predownloaded"
    fun = "update_source_predownloaded"


# update gapminder source
def update_source_gapminder(ctx):
    """download gapminder indicators"""
    for f in [
            'mean_income',
            'gini',
            'gdp',
            'population',
            'on_income_groups',
            'wb_income_groups',
            'national_poverty_lines'
    ]:
        ctx(
            rule="${PYTHON} ${SRC} " + f,
            source="scripts/update_source_gapm.py",
            target=f"source/gapminder/{f}.csv",
            always=True
        )


class UpdateSourceGapminder(BuildContext):
    cmd = "update_source_gapminder"
    fun = "update_source_gapminder"


# tidy povcalnet data
def tidy_source(ctx):
    """tidy downloaded povcalnet data"""
    povcalnet_source_files = [
        "source/povcalnet/" + "{:04d}.csv".format(i) for i in range(MAX_POVCALNET_BRACKET)
    ]
    source_files = ["scripts/step1.py"]
    source_files.extend(povcalnet_source_files)
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=source_files,
        target="povcalnet_clean.parquet"
    )


class TidySource(BuildContext):
    cmd = 'tidy_source'
    fun = 'tidy_source'


# smooth povcalnet shapes
class SmoothSource(BuildContext):
    cmd = "smooth_source"
    fun = "smooth_source"


def smooth_source(ctx):
    """create smooth shapes from povcalnet data"""
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=["scripts/step2.py",
                'povcalnet_clean.parquet'],
        target=[
            "povcalnet_smoothed.parquet",
            'povcal_country_year.csv'
        ],
    )


# create mean central shapes
class StandardizeShape(BuildContext):
    cmd = "standardize_shape"
    fun = "standardize_shape"


def standardize_shape(ctx):
    """make standardised shapes from smoothed povcalnet shapes"""
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=["scripts/step3.py",
                "scripts/bracketlib.py",
                ctx.path.find_or_declare('povcalnet_smoothed.parquet')],
        target='mean_central_shapes.parquet',
    )


# compute neighbours
class ComputeNeighbours(BuildContext):
    cmd = "compute_neighbours"
    fun = "compute_neighbours"


def compute_neighbours(ctx):
    """compute neighbours for all country/year"""
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=["scripts/compute_neighbours.py",
                ctx.path.find_or_declare('source/gapminder/mean_income.csv'),
                ctx.path.find_or_declare('source/gapminder/gini.csv'),
                ctx.path.find_or_declare('povcal_country_year.csv')
                ],
        target='neighbours_list.json',
    )


# extimate all shapes
class EstimateShapes(BuildContext):
    cmd = 'estimate_shapes'
    fun = 'estimate_shapes'


def estimate_shapes(ctx):
    """estimate historical and future shapes"""
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=["scripts/step4.py",
                ctx.path.find_or_declare('source/gapminder/gini.csv'),
                ctx.path.find_or_declare('neighbours_list.json')
                ],
        target='estimated_mountains.parquet',
    )


# combine all shapes, get population number
class PopByIncome(BuildContext):
    cmd = 'pop_by_income'
    fun = 'pop_by_income'


def pop_by_income(ctx):
    ctx(
        rule="${PYTHON} ${SRC[0]} ",
        source=["scripts/step5.py",
                ctx.path.find_or_declare("estimated_mountains.parquet"),
                ctx.path.find_or_declare("povcalnet_smoothed.parquet"),
                ctx.path.find_or_declare('source/gapminder/population.csv'),
                ],
        target=['population_500plus.parquet', 'population_percentage_500plus.parquet'],
    )


def build(bld):
    pass


def buildall(ctx):
    from waflib import Options
    Options.commands = ['tidy_source', 'smooth_source',
                        'standardize_shape', 'compute_neighbours',
                        'estimate_shapes', 'pop_by_income'
                        ]
